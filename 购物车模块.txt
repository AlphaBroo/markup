# 购物车模块

## 购物车增加技术选用
不用后端渲染，使用ajax

购物车数据存储，使用redis
{用户登录，保存到redis，
用户未登录，保存到浏览器中，
未登录用户登录后，合并数据至redis中}

## 用户购物车数据保存
保存商品编号，数量
redis中每个用户一条记录，采用哈希类型存储数据
cart_<user_id>{
        'sku_id':'count'
        }

## 详情页面加入购物车
urls.py中添加url
主程序中添加carts的url


# 前端只有一个按钮，故数据传输方式可定义为
# GET /carts/add?sku_id=x&sku_count=y，但，考虑到是前端发送后端保存，由于习惯故舍弃GET方式
# POST /carts/add 数据可置于路径/(),可置于/?,也可置于请求体中（仿照表单）
后端视图（carts.views.py）
class AddView(View，requst):
    """添加购物车"""
    # 获取参数 sku_id sku_count
    # 判断用户的登录状态
        # 用户登录情况下的购物车添加
        # 校验参数是否完整
        # 判断商品数量的参数是否正确
        # 判断商品是否存在
        # 判断库存
        # 业务处理
        # 保存购物车数据到redis中

    # 返回

前端页面的js编制

# 直接点击按钮，会禁止访问
添加midlewear:'{{csrf_token}}'

# 购物车数量不从前端获得，从后端获得数量总和
后端增加用户购物车总数量，返回给前端

json模块可以将字典与字符串只拿互相转换，可以存储到cookie中
更改类的逻辑结构
class AddView(View，requst):
    """添加购物车"""
    # 获取参数 sku_id sku_count
    # 校验参数是否完整
    # 判断商品数量的参数是否正确
    # 判断商品是否存在
    # 判断库存
    # 业务处理
    # 判断用户的登录状态
        # 用户登录情况下，保存到redis中
            先获取购物中商品的状态与数量
            若原有数据，数量累加
            获取购物车所有的数量
        返回json数据
        # 用户未登录情况下，保存到cookie中
            从cookie中获取原购物车数据
            判断是否为空
                json.loads()转换为字典
            获取原有数据
            用户购物数据字典整合
            json.dumps()转换为字符串
            将购物车数据设置到cookie
        返回json数据

constant.py中设定购物车数据cookie的有效期

商品模块购物车数量统计
有index页面，详情页面，列表页面，故可建立公共类继承
class BaseCartView(View):
    """自定义的保存了求取购物车数量的方法视图父类"""
    def get_cart_num(self, request)
        """获取购物车数量"""
        用户登录，获取redis
        返回数量
        用户未登录，获取cookie
        返回数量








"""
单个继承
"""
# 格式
# class 子类名（父类名）

    
# 属性与方法不同时
# 子类不仅仅有自己的属性和方法，同时拥有父类的属性和方法


# 属性与方法有相同时
# 子类重写了父类的属性和方法，以子类为准，父类同名的属性和方法已被覆盖


# 调用父类同名的方法与属性
# 方法一：
# 父类名().父类属性/方法---》新建父类对象，然后调用父类属性/方法

# 方法二：
# 父类名.__init__(self)--->调用父类属性；
# 父类名.父类方法(self)----》调用父类方法

# 方法三：
# super(子类名，self).__init__(self)--->调用父类属性；
# super(子类名，self).父类方法(self)----》调用父类方法
# 对于多个继承，只能调用左边第一个父类的

# 方法四：
# super().__init__()--->调用父类属性；
# super().父类方法()----》调用父类方法
# 对于多个继承，只能调用左边第一个父类的


# __mro__
# 适用于super方法，得到一个该类继承的多个父类(包括该类)的一个元组合，
# 若没有给super参数，那么就去__mro__方法得到的元组里，执行元组内当前类名之后那个父类的方法
# 若指定了类的参数，那么就去__mro__方法得到的元组里，执行元组内参数指定的那个类之后的父类的方法



"""
多个继承
"""
# 格式
# class 子类名（父类1，父类2...)

# 当父类方法名不同时
# 子类继承了所有父类的方法名

# 当父类方法名有相同时
# 子类默认继承相同方法名中从左至右第一个父类的


# 查看继承顺序
#　子类的魔法属性__mro__

# 判断类之间关系或对象是哪个类对象
# issubclass(sub,sup)
# 布尔函数，判断类sub是否是类sup的子类或者子孙类，是则返回True

# isinstance(obj,class)
# 布尔函数，判断obj是calss类或者子类的实例对象，是则返回True


"""
多层继承
"""
# 格式：
# class 子类名1（父类名）
# class 子类名2（子类名1）





"""
文件的打开
"""
#文件格式：文本文件、二进制文件
# fileobj = open(filename[,mode[,buffering]])
# 返回代表连接的文件对象(也叫文件描述符或文件流),filename可以是绝对路径，也可以是相对路径。

    
# 读取文本
# 文件存在，直接打开，文件不存在，报错
f = open('hm.txt','r')

# 写入文本
# 文件存在，直接打开，文件不存在，创建
f = open('hm.txt','w')


# r	
# 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。

# w
# 打开一个文件只用于写入。若该文件已存在则将其覆盖。若不存在，创建新文件。

# a
# 打开一个文件用于追加。若文件已存在，文件指针将会放在文件的结尾，新的内容将会被写入到已有内容之后。若文件不存在，创建新文件进行写入。

# r+
# 打开一个文件用于读写。文件指针将会放在文件的开头。

# w+
# 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。

# a+
# 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。

# rb
# 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。

# wb
# 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。

# ab
# 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。

# rb+
# 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。

# wb+
# 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。

# ab+
# 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

"""
二进制文件的读写
"""
# utf-8中3~4个字节代表每个字符

# 以二进制文件写入
# f = open("new.txt",'wb')
# 汉字->转码->二进制保存
# f.write("中国".encode('utf-8'))
# f.close()

# 读取二进制文件
# f = open('new.txt','rb')
# # 二进制->解码->中文字符串
# 三个字符为一个汉字
# result = f.read(3).decode('utf-8')
# print(result)
# f.close()

"""
文件读取
"""
f.read([size])
# 读取指定的字节数，若是size未给定或为负数则读取所有
# 返回字符串
# 默认r格式以文本格式保存数据，无论是字符还是中文，都是一个字符

f.readline([size])
# 读取整行，包括”\n“字符
# 返回字符串

f.readlines([sizeint])
# 读取所有行，若sizeint>0,返回总和大约为sizeint字节的行，实际读取可能偏大，因为需要填充缓冲区
# 返回的是一个列表，其中每一行的数据为一个元素

# 文件读取到末尾，会返回空字符串，可做结束判定

"""
文件写入
"""

f.write(str)
# 只能写入字符串

f.writelines(sequence)
# 向文件写入一个序列字符串列表

# 写方法不能自动在字符串末尾添加换行符，需要自己添加'\n'


"""
文件关闭
"""
f.close()
# 关闭文本，关闭文本后不能进行读写操作
# 目的是释放文件占用的资源，若没有关闭，虽然python会在文件对象引用计数为0时自动关闭，但是可能会丢失输出缓冲区的数据，若不及时关闭，该文件资源被占用，无法进行其他操作 


# 打开关闭文件一体化
# with open
with open ('new.txt') as file_object:
    contents = file_object.read()
    print(contents)
    
"""
文件定位
""" 
f.tell()
# 返回文件中光标当前位置和开始位置之间的字节偏移量

f.seek(offset[,whence])
# 设置文件中光标当前位置，offset是偏移字节数，可以取负值，whence是引用点
# offset：正值表示从前至后，负值表示从后至前
# whence：0是文件开始处(默认)，1是当前位置，2是文件结尾
# 在追加模式(a,a+)下打开文件，不能使用seek函数进行定位追加
seek(5,0):表示从文件的开头偏移5个字符
seek(3,1):表示从文件当前位置向后偏移3个字符
seek(-5,2):表示从文件的末尾向前偏移5个字符   
 

"""
文件其他
"""
f.next()
# 返回文件下一行

f.truncate([size])
# 从文件的首行首字符开始截断，截断文件为size个字符，无size表示从当前位置阶段；截断之后V后面的所有字符被删除，其中Windows系统戏下的换行代表2个字符大小

f.flush()
# 刷新文件内部缓存,直接把内部缓冲区的数据写入文件，而不是被动地等待输出缓冲区写入

f.fileno()
# 返回一个整型的文件描述符，可用在如os模块的read方法等一些底层操作上

f.isatty()
# 如果文件连接到一个终端设备，返回True，否则返回False
 






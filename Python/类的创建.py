"""
Python的面向对象
"""
# 类的继承机制允许多个基类，
# 派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。
# 对象可以包含任意数量和类型的数据。

"""
类的实例
"""
#类定义
class People(object):
    #定义基本属性
    name = ''
    age = 0
    # 类属性
    country = 'China' 
    #定义私有属性,私有属性在类外部无法直接访问
    __weight = 0
    #定义构造方法
    def __init__(self,n,a,w):
        self.name = n
        self.age = a        
        self.__weight = w
    def speak(self):
        print("%s 说: 我 %d 岁。" %(self.name,self.age))
    # 定义私有方法，私有方法在类外部无法直接访问
    def __move(self):
        print('you can run!')
    @staticmethod
    def get_country()：
        return People.country
    @classmethord
    def set_country(cls,country):
        cls.country = country
        
    
    # 定义对象输出时的内容    
    def __str__(self):
        return '姓名：%s,年龄：,体重：%s' % (self.name,self.age,self.weight) 
    # 对象销毁后，自动走
    def __del__(self):
        print('bye!')        
 
# 实例化类
p = People('runoob',10,30,50)
p.speak()
# 调用__str__
print(p)

# 通过实例对象访问类属性
print(p.country)
# 通过类访问类属性
print(People.country)

# 通过对象访问静态方法
p.get_country()
# 通过类访问静态方法
People.get_country()

# 类属性调用修改
P.country = "America"
# 或调用类方法修改类属性
p.set_country('America')

# 多1次引用，计数器加1
p1 = p
p2 = p1
del p1
del p2
# 全部销毁，计数器为0时，才调用__del__
del p

"""
创建类
"""
# 类(Class) 由3个部分构成
# 类的名称:类名
# 类的属性:一组数据
# 类的方法:允许对进行操作的方法 (行为)

# class是标识符，类名首字母大写
# self必须位于类的成员函数的第一参数位置，代表实例对象，函数内部调用类的属性和函数需加self


"""
属性
"""

# 私有属性

# 格式：
# __属性名 = 值

#调用： 
# 私有属性在类的外部时无法直接调用，需要间接通过公有方法在类的内部来调用，在类内部的方法中使用self.__private_attrs

# 修改：
# 直接在私有属性赋值处修改
# 类的内部，通过类内部的方法(私有/公有)对私有属性修改
# 类的外部，通过调用公有方法对私有属性间接修改
# 程序员调试和测试时可用：对象名._类名+私有成员名在外部访问


# 公有属性

# 格式:
# 属性名 = 值

# 调用修改
# 类的内外均可调用修改
# 实例对象名 = 类名(参数)
# 实例对象名.属性名 = 新值



# 类属性
# 直接在类中定义，不经__init__初始化的属性
# 只有一个地址

# 调用：
# 类名.属性名
# 实例对象名.属性名---》默认给对象添加一个属性，屏蔽了类的属性名，故只能读不能改原值

# 修改：
# 类名.属性名 = 新值，可以直接修改
# 实例对象名.属性名 = 新值---》修改的是对象的属性值，类属性值未变化
# 类方法修改

# 实例属性
# 在__init__中定义，定义式夹self为前缀
# 调用修改：
# 实例对象名 = 类名(参数)
# 实例对象名.属性名 = 新值


# 实例属性的函数访问 
# getattr(obj,name):访问对象的属性
# hasattr(obj,name):检查是否存在一个属性 
# setattr(obj,name,value):设置一个属性。如果属性不存在，会创建一个新的属性
# delattr(obj,name):删除属性

# 内置类属性
# __dict__:类的属性(一个字典，由类的数据属性组成)，对象的属性
# __doc__:类的文档字符串，若无定义为None
# __name__:类的名字
# __module__:类定义所在的模块名称，交互模式其值为__main__
# __class__:当前操作的对象所在的类的名称

"""
特殊属性
"""
# _xxx
# 这样的对象焦作保护成员，不能用from...import*导入，只有类和子类内部成员方法能访问

# __xxx
# 类中的私有成员，只有类自己内部成员方法能访问，子类内部成员不能方法，但在对象外部可以通过“对象名._类名__xxx”来做特殊反问

# __xxx___
# 系统定义的特殊方法：魔法方法

"""
方法
"""
# 公有方法：
# 创建格式：
    # def 方法名(self,参数...)
# 执行对象方法：
    # 对象名.方法名()
    # self.方法名()
    # 类名.方法名(self或者对象)
# def关键字定义方法，必须包含参数self，且为第一个
# self指的是类的实例，self.class指向的是类


# 私有方法
# __private_method，__开头，生命该方法为私有方法
# 在类的外部时无法直接调用，需要间接通过公有方法在类的内部来调用，只能在类的内部调用self.__private_methods


# 类方法
# 创建格式：
    # @classmethod
    # def 方法名(cls,参数...)
# 执行类方法：
    # 类名.方法名()
    # 对象名.方法名()=>不建议使用

# 是类对象所拥有的方法，需要用修饰器@classmethod来标识
# 第一个参数必须是类对象，一般以cls作为第一个参数
# 与类绑定，不依赖对象，不需要实例化对象
# 实例对象和类对象均可去访问

# 静态方法
# 创建格式：
    # @staticmethod
    # def 方法名(参数...)
# 执行静态方法：
    # 对象名.方法名
    # 类名.方法名
    # self.方法名
# 需要通过修饰器@staticmethod来进行修饰，
# 静态方法不需要多定义参数，没有隐含的cls
# 通过对象和类来访问，只能访问类属性，不能访问对象属性
# 静态方法中不需要额外定义参数，因此在静态方法中引用类属性的话，必须通过类实例对象来引用

# 在python中类方法与静态方法通用，只是在需要cls参数时


"""
魔法方法
"""

# __new__()
# 创建对象，返回值为类的实例对象
# 未创建时，Python默认调用父类自动创建
# 在重写new方法的时候，不建议把后面的不定长参数删掉
# 至少要有一个参数cls,代表要实例化的类，在实例化时由Python解释器自动提供
# 必须要有返回值的，返回通过其类创建的对象，
# 可以return父类__new__出来的实例，或直接是object的__new__出来的实例
def __new__(cls, *args, **kwargs):
    # 可以super()或者父类名或者object
    return object.__new__(cls)


# __init__()
# 初始化函数，无返回值
# 未创建时，python默认自动创建
# 默认第一个参数是self,其他参数在其后添加即可
def __init__(self):
    self.data = []


# __str__()
# 面向客户
# 只有一个参数self，返回值为字符串
# 未创建时，默认情况下，打印对象是输出对象的内存地址
# 若重写了__str
# __魔法方法，会打印这个方法返回的字符串，作为这个对象的描述信息,若直接输出，输出对象的内存地址


# __repr__ ()
# 面向程序员
# 只有一个参数self，返回值为字符串
# 未创建时，默认情况下，打印对象调用__str__
# 若重写了__repr
# __魔法方法，会打印这个方法返回的字符串，作为这个对象的描述信息
# ，若直接输出，也输出对象的描述信息


# __del__()
# 析构函数,只有一个参数self，无返回值
# 未创建时，python默认在程序结束后，对象自动销毁
# 若无del,当使用类创建一个对象后，待程序执行完成后，对象默认会自动销毁。当对象销毁后，会走其类的__del__方法
# 若有del，对象引用结束，程序未结束时，python会自动调用__del__方法
# 当变量保存了多次对象引用后，对象计数器增加，只有使用del(),把对象全部销毁，计数器为0时，才能走__del__方法


"""
调用执行
"""
# 对象名= 类名(参数)
# 对象名.属性名
# 对象名.方法名

# 在类内部获取属性和实例方法，通过self获取
# 在类外部获取属性和实例方法，通过对象名获取
# 使用一个类创建不同的实例对象
# 实例对象的内存地址不同，属性内存地址也不同
# 实例对象的方法的内存地址相同，通过self来区分

"""
运算符重载
"""
# __add__: 加运算
# __sub__: 减运算
# __mul__: 乘运算
# __div__: 除运算
# __mod__: 求余运算
# __pow__: 乘方
# __lt__:小于
# __eq__:等于
# __len__: 获得长度
# __or__:或运算

# __setitem__ : 按照索引赋值
# __getitem__: 按照索引获取值
# __cmp__: 比较运算
# __call__: 函数调用



